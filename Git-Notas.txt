Curso de Git (Notas)


 1) O que é o Git?

    -> Sistema de controlo de versão DISTRIBUÍDO
        - Todo o colaborador possui uma cópia do repositório
        - Ações podem ser feitas localmente
        - Não depende de uma única máquina
    -> Open Source
    -> Rápido e eficiente



2) Diferenças entre o Git/GitHub/GitLab

    -> GitHub
        - Serviço na nuvem, para armazenamento de repositórios do Git
        - Funcionalidades facilitam a colaboração entre usuários
        - Permite a criação de repositórios públicos e privados gratuitamente
    -> GitLab
        - Muito semelhante ao GitHub mas, em média, mais utilizado pelas empresas
    


3) Como funciona o Git?

    -> Em sistemas distribuidos, os colaboradores do projecto quando fazem a cópia de um projeto, não copiam somente a ultima versao, mas sim o repositório todo com o historico de alterações. Assim problemas relacionados a dependencias do servidor não existem mais.

    -> Caracteristicas :
        - Operações Locais
        - Suporte a desenvolvimento não linear
        - Integridade
        - Independencia de Complexidade de projecto




3.5) Os 3 estados

    -> Modificado   (Modified)
        - Cada vez que, no repositório, um fiheiro é marcado, removovido ou modificado, ele é marcado como 'modificado'.
        - Significa que o arquivo sofreu alterações mas ainda não faz parte do commit.

    -> Preparado    (Staged)
        - A partir momento que executo ' git add '
        - Neste momento sabemos que o arquivo foi modificado e está na área de preparação para ser consolidado.

    -> Consolidado  (Commited)
        - Após a preparação, os arquivos são salvos quando o comando ' git commit ' é executado.

    ---> WORKFLOW
        Modificaçao nos arquivos no diretório de trabalho 
       ---> ' git add ' --->
       Arquivos são selecionados e adicionados à area de preparação 
       ---> ' git commit ' --->
       Comando commit é executado e leva os arquivos do estado de preparação para o estado consolidado, escrevendo a versão final. 
    



4) Comandos

    -> git init 
        - Para que serve?:
            Este comando é responsável por fazer a criação e inicialização de um repositório Git. Pode ser Executado num diretório vazio ou com arquivos existentes. 
        - Quando é usado?
            Quando queremos incluir um projeto ao controlo de versões.        
        ____________________________
        > git init
        ____________________________


    -> git config
        - Utilizado para fazer configurações de identificação. Basta fazer uma vez.
        ____________________________
            // Estes cmds basta fazer uma vez
        > git config --global user.name rafa23antunes
        > git config --global user.email rafaelantunesro@gmail.com
            // Este cmd serve para ver o que está configurado
        > git config -- list
        ____________________________
    

    -> git status
        - Utilizado para saber como estão os arquivos num determinado repositório.
        ____________________________
        > git status
        ____________________________
    
    
    -> git add
        - Serve para adicionar arquivos ao repositório local
        - Utilizando o ' . ' a seguir ao add, adicionamos todos os arquivos à area de preparação. Se quisessemos ficheiros específicos, teriamos de escrever o nome deles. PAra adicionar todos os arquivos também é possível escrever, a seguir ao add, '-A' ou ' --all'.
        ____________________________
            // adicionar TODOS os ficheiros à area de preparação
        > git add .

            // Tb é possível fazer filtros. P.E., ficheiros terminados em txt
        > git add *.txt
        ____________________________

    
    -> git commit
        - Guardar os arquivos no repositório local.
        - Deve-se sempre passar uma mensagem simples e clara do que foi feito.
        ____________________________
        > git commit -m "mensagem aqui"

            // É Possível também fazer o add e o commit no mesmo comando, executando:
        > git commit -a -m "mensagem a por"
        ____________________________

    
    -> git diff
        - Serve para visualizar as mudanças do conteúdo dos arquivos
        - É costume utilizar-se antes de adicinar um arquivo para ver se nada está a ser enviado por engano. (Antes do 'git add)'
        ____________________________
            // se não tiver o nome do ficheiro, faz o diff de todos os ficheiros. 
        > git diff 

        > git diff Git-Notas.txt
        ____________________________


    -> git log
        - Visualizar o histórico de um repositório
        - Para verificar quando certa alteração ocorreu
        ____________________________
        > git log
            // Se quisermos ver mais resumido
        > git log --oneline
        ____________________________


    -> git reset
        - Utilizada quando fizemos uma alteração e queremos desfaze-la.
        ____________________________
            // No repositório, move o nosso apontador Head para o ficheiro anterior
        > git reset --soft HEAD~1
            // Agora tanto no repositorio como na area da preparação, o apontador aponta para a versão anterior do ficheiro
        > git reset --mixed HEAD~1
            // Agora o apontador é atualizado nas três areas (repositório, area de preparação, diretório do trabalho)
        > git reset --hard HEAD~1
        ____________________________
    

    -> git branch
        - Uma branch representa uma bifurcação, serve para criarmos uma área diferente no nosso repositório.
        - Depende de como o projeto funciona, mas normalmente, cada membro do grupo cria a sua própria branch quando vai desenvolver alguma coisa.
        ____________________________
        > git branch nomeDaNovaBranch (não é necessário parentesis)
            // Se quisermos ver todas as branches fazemos
        > git branch
            //Alterar o nome da branch onde estamos
        > git branch -m NovoNome
            // Alterar o nome de uma branch, mas estando noutra branch
        > git branch -m nomeAntigo novoNome
            // Para apagar uma branch. Neste caso, se ainda não tivermos feito merge, dará um aviso
        > git branch -d nomeDaBranch
            // Se tivermos a CERTEZa que queremos apagar uma branch
        > git branch -D nomeDaBranch
        ____________________________

    
    -> git checkout
        - Serve para alternar entre branches
        ____________________________
            //Depois de fazer um 'git log', teremos os codigos de commit. Podemos usar esses codifgos para "viajar" entre commits.
        > git checkout codigo
            // apontar para a branch master
        > git checkout master
            // Criar uma branch e mudar logo para essa branch
        > git checkout -b nomeNovaBranch
        ____________________________





5) Ficheiro .gitignore
    
    -> Define quais ficheiros específicos, ou padrão de ficheiros que devem ser ignorados.
    
    -> Pode ser criado a qualquer momento mas geralmente é criado após a criação de um repositório.

    -> Tenho um exemplo na pasta.


